[["setup.html", "Chapter 1 Setup 1.1 Starting a new book 1.2 Adding chapters 1.3 Publishing your book 1.4 Getting a DOI 1.5 Converting to a package", " Chapter 1 Setup 1.1 Starting a new book 1.1.1 Create a new github repository For psyTeachR courses, the repository should be created by the course lead on the psyTeachR github and have a name structure like this: ug1-practical ug2-practical ug3-stats ug4-dissertation msc-data-skills 1.1.2 Fork the repository Our main course pages are under https://psyteachr.github.io, but you should work on your course page on a forked version in your own github account. On the Code tab of the new repository, click the Fork button. Figure 1.1: Fork a repository from the psyTeachR account If you’re a member of psyTeachR, you’ll get this interface telling you that you’ve already forked this project. You just need to choose your personal account. Figure 1.2: Choose your personal account You’ll see this animation for a few seconds while the repository is being forked to your account. Figure 1.3: Just be patient 1.1.3 Make a new RStudio project Click the green Clone or download button on your personal forked repository and copy the URL (use HTTPS unless you know you’ve set up SSH). Figure 1.4: Find the URL to clone Under the File menu in RStudio, choose New Project... and choose Version Control from the list of options. Figure 1.5: File &gt; New Project… &gt; Version Control Choose Git from the next screen. Figure 1.6: Choose Git Paste the URL you copied from your repository into the Repository URL. Keep the Project directory name the same as the repository name (it should default to this). You can Create the project as a subdirectory anywhere on your computer; I recommend making a directory to keep all your github R projects in. Figure 1.7: Clone your github repository to the RStudio project 1.1.4 Download the template Download the psyTeachR Bookdown Course Template to you computer, unzip it, and move the files into the directory of your new RStudio project. 1.1.5 Edit the template 1.1.5.1 _output.yml Open _output.yml. It should look like this: bookdown::gitbook: default: true smart: false includes: in_header: include/header.html after_body: [include/footer.html, include/webex.js] css: [include/psyteachr.css, include/style.css] config: toc: collapse: section scroll_highlight: yes before: | &lt;li&gt;&lt;a href=&quot;./&quot;&gt;Book Template&lt;/a&gt;&lt;/li&gt; after: | &lt;li&gt;&lt;a rel=&quot;license&quot; href=&quot;https://creativecommons.org/licenses/by-sa/4.0/&quot; target=&quot;blank&quot;&gt;&lt;img alt=&quot;Creative Commons License&quot; style=&quot;border-width:0&quot; src=&quot;https://i.creativecommons.org/l/by-sa/4.0/88x31.png&quot; /&gt;&lt;/a&gt;&lt;li&gt; &lt;li&gt;&lt;a href=&quot;https://psyteachr.github.io/&quot; target=&quot;blank&quot;&gt;PsyTeachR&lt;/a&gt;&lt;/li&gt; download: [] fontsettings: theme: white family: sans size: 2 sharing: facebook: yes twitter: yes google: no linkedin: no weibo: no instapaper: no vk: no all: [&#39;facebook&#39;, &#39;google&#39;, &#39;twitter&#39;, &#39;linkedin&#39;, &#39;weibo&#39;, &#39;instapaper&#39;] bookdown::pdf_book: includes: in_header: preamble.tex latex_engine: xelatex citation_package: natbib keep_tex: yes Change “Book Template” in the config:toc:before: section to the name of your book. This is the text readers will see at the top of your table of contents that brings them back to the start of the book. Save and close this file. 1.1.5.2 header.html The header include information for displaying your website on social media The shortcut icon creates the favicon that you see in the tab bar or a web browser. Open include/header.html. It should look like this: &lt;meta property=&quot;og:title&quot; content=&quot;psyTeachR Book Template&quot;&gt; &lt;meta property=&quot;og:description&quot; content=&quot;Guide for psyTeachR course books.&quot;&gt; &lt;meta property=&quot;og:image&quot; content=&quot;https://psyteachr.github.io/images/twitter/psyteachr.png&quot;&gt; &lt;meta property=&quot;og:url&quot; content=&quot;https://psyteachr.github.io/book-template/&quot;&gt; &lt;meta property=&quot;twitter:card&quot; content=&quot;summary_large_image&quot;&gt; &lt;link rel=&quot;shortcut icon&quot; href=&quot;https://psyteachr.github.io/images/logo.png&quot;&gt; Change the content of each item to something relevant to your book. You can check that this is properly configured after you publish you website by putting the URL in the Twitter Validator or the FaceBook Validator. Save and close this file. 1.1.5.3 _bookdown.yml Open _bookdown.yml. It should look like this: book_filename: &quot;_main&quot; new_session: yes output_dir: &quot;docs&quot; before_chapter_script: [&quot;R/psyteachr_setup.R&quot;, &quot;R/my_setup.R&quot;] delete_merged_file: true clean: [] language: ui: chapter_name: &quot;Chapter &quot; label: fig: &#39;Figure &#39; tab: &#39;Table &#39; eq: &#39;Equation &#39; thm: &#39;Theorem &#39; lem: &#39;Lemma &#39; cor: &#39;Corollary &#39; prp: &#39;Proposition &#39; cnj: &#39;Conjecture &#39; def: &#39;Definition &#39; exm: &#39;Example &#39; exr: &#39;Exercise &#39; proof: &#39;Proof. &#39; remark: &#39;Remark. &#39; solution: &#39;Solution. &#39; You can change the chapter_name from “Chapter” to “Lab” or something else that makes sense for your course if you want. Leave the labels alone unless you’re translating to another language. Save and close this file. 1.1.5.4 index.Rmd Open _index_example.Rmd. The top YAML header should look like this: --- title: &quot;Template Course&quot; author: &quot;psyTeachR&quot; date: &quot;2021-03-22&quot; site: bookdown::bookdown_site documentclass: book bibliography: [book.bib, packages.bib] biblio-style: apalike link-citations: yes description: &quot;This is a template. Use it to start a new course book.&quot; --- Update the title, author, and description strings. For now, don’t change anything in the cite-packages R chunk at the top. This just automatically creates a bibliography file for the specified R packages. Now you can edit the overview. Replace the filler text with a description of your course and fill in the course aims and ILOs. The {-} at the end of the overview title makes sure this chapter isn’t numbered. Save this file with the name index.Rmd. 1.1.6 Render the book Now you’re ready to create the book. Run the following code in the console. bookdown::render_book(&quot;index.Rmd&quot;) You’ll see a lot of text in the console window, which should end in something that looks like: Output created: docs/index.html [1] &quot;/Users/lisad/rproj/psyteachr/book-template/docs/index.html&quot; The last line is the location of your new book. You can copy and paste that in a web browser to view the book. Alternatively, you can open the docs directory in the Files pane of RStudio, click on index.html, and choose View in Web Browser. Figure 1.8: Open your book from the Files pane in RStudio. 1.2 Adding chapters Create new chapters by creating new R Markdown files. Under the File menu in RStudio, choose New File and R Markdown.... Don’t bother adding a title or changing any default settings; the first thing we’ll do is delete all of the content. Figure 1.9: Make a new chapter in a new .Rmd file Name the file with the chapter number and a short title all in lowercase, separated by dashes, like 01-getting-started.Rmd. Chapters will render in alphabetical order by filename (you can specify the order in the yml, but it’s a pain), so all chapters need to start with a number or they’ll end up in the appendix. 1.2.1 Content Start your chapter with a level 1 header. This will be the chapter title. You can then continue to write your chapter in R Markdown. You can refer to any section by it’s label, which is the section title with spaces changed to dashes (e.g., a section called “Your first R Markdown file” can be referenced as #Your-first-R-Markdownfile. You can set a shorter custom label for a section by adding an ID in the format {#rmarkdown}. 1.2.2 Multiple .Rmd files per chapter You can break a chapter up into separate .Rmd files like 01.1-prep, 01.2-in-class, 01.3-homework with a level 1 header only at the start of the first section of the chapter. If you do this, you’ll get the following warning when you render the book; you can just ignore it. Warning message: In split_chapters(output, gitbook_page, number_sections, split_by, : You have 7 Rmd input file(s) but only 6 first-level heading(s). Did you forget first-level headings in certain Rmd files? 1.2.3 Rendering a single chapter After you’ve added several chapters, the whole book might take a long time to render. If you want to quickly check the formatting on a single chapter, use the following code. bookdown::preview_chapter(&quot;02-style-guide.Rmd&quot;) 1.2.4 Adding appendices Add appendices in the same way as chapters. Just name them following the pattern appendix-a-name.Rmd. The file appendix-0.Rmd just contains the appendix header that groups appendices together (# (APPENDIX) Appendices {-}). You don’t need to edit this, but you can delete this file if you are not going to use appendices. 1.2.5 Automatic setup scripts Every .Rmd file automatically runs two scripts to load libraries you’ll probably use on every page and set consistent styles for figures across books. The code is located in separate files, so you can make updates in a single place that affect every chapter. If there is a package you’ll need in every chapter, you can create a file called R/my_setup.R. Don’t edit R/psyteachr_setup.R; this file is likely to need periodic updating and it is easier to just replace it than to figure out what changes you made. Any code in R/my_setup.R will be loaded after and overrule code in R/psyteachr_setup.R (e.g., if you want to set a different ggplot theme — but please don’t unless you have a good reason!). 1.3 Publishing your book Render the book with bookdown::render_book(\"index.Rmd\") Commit your changes (you can do this from the command line if you’re comfortable with git) In the Git paneselect all files, Click one checkbox under Staged to check them all Click the Commit button Write a commit message describing the changes you made Click the Commit button Push your changes to GitHub click the Push button with the green up arrow Set up GitHub Pages This only needs to be done once per repository Go to the repository on GitHub Click on the Settings tab Scroll down to GitHub Pages Change Source to “master branch /docs folder” If the page refreshes, scroll back down to GitHub Pages and you should see a green bar with “Your site is published at https://xxxxxx.github.io/repo-name/” Click on the link to see your book It will usually take a few minutes for your files to be copied over to the web server, so refresh a few times 1.4 Getting a DOI You can gve your book a DOI using Zenodo. 1.4.0.1 .zenodo.json Open .zenodo.json. If you can’t see this file, you need to change your settings to be able to see invisible files (that start with .). In RStudio, go to the Files pane, click on More, and choose Show Hidden Files. Edit the file to make it applicable to your book. You can add more authors to the “creators” list. Update the version and publication date each time you update the DOI. We follow the version numbering scheme for R packages. In-prep (beta) versions should have version numbers starting with 0.0.9000, and the first full release should be 1.0.0. { &quot;description&quot;: &quot;The 2019-2020 version of the course book template for the Institute of Neuroscience and Psychology at the University of Glasgow.&quot;, &quot;license&quot;: &quot;cc-by-sa&quot;, &quot;title&quot;: &quot;PsyTeachR Book Template&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;upload_type&quot;: &quot;software&quot;, &quot;publication_date&quot;: &quot;2020-05-12&quot;, &quot;creators&quot;: [ { &quot;name&quot;: &quot;Lisa DeBruine&quot;, &quot;affiliation&quot;: &quot;University of Glasgow&quot;, &quot;orcid&quot;: &quot;0000-0002-7523-5539&quot; }, { &quot;name&quot;: &quot;Phil McAleer&quot;, &quot;affiliation&quot;: &quot;University of Glasgow&quot;, &quot;orcid&quot;: &quot;0000-0002-4523-2097&quot; } ], &quot;access_right&quot;: &quot;open&quot;, &quot;related_identifiers&quot;: [ { &quot;scheme&quot;: &quot;url&quot;, &quot;identifier&quot;: &quot;https://PsyTeachR.github.io/book-template/&quot;, &quot;relation&quot;: &quot;isSupplementTo&quot; } ] } 1.4.1 Setting up a DOI for the first time Log into Zenodo using your github account Go to GitHub Settings and follow the instructions to access your github account and enable the relevant repository Flip the switch to turn on Zenodo for your repository Go to that repository on github.com Click releases Click the Create a new release button Make sure the tag version, title, and description are consistent with the version, title, and description in .zenodo.json You don’t need to attach any files or binaries Check “This is a pre-release” if you are just setting up your DOI and this version isn’t complete Click the Publish release button Add your badge Go back to Zenodo and click on the DOI to get the badge. If it’s yellow, then Zenodo is still processing your updates, so wait a minute and refresh until it turns green Copy the HTML version Open _output.yml and add the HTML badge as follows: before: | &lt;li&gt;&lt;a href=\"./\"&gt;Book Template&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"https://zenodo.org/badge/latestdoi/000000000\"&gt;&lt;img src=\"https://zenodo.org/badge/000000000.svg\" alt=\"DOI\"&gt;&lt;/a&gt;&lt;/li&gt; You can also add the citation to a README file for your repository and anywhere else you like. 1.4.2 Updating your book You only need to do this when you are publishing a new major version, such as adding new chapters or big revisions between years. Make sure the .zenodo.json file is up to date Create a new release on GitHub Go to Zenodo to get your updated DOI and badge (or you can just use the all-versions DOI rather than the version-specific one) 1.5 Converting to a package You can convert your book to a package to gain a few advantages: Students can access the course book offline You can include all packages to be used in the course as dependencies so they are all downloaded with the book package You can include datasets for the course You can include any other resources, such as template files If you already have a book set up like above, follow these steps to convert it to a package: 1.5.1 Package Infrastructure Run the following code to create some of the package infrastructure. You can do everything manually, but I like to use the extremely helpful package usethis. # create a package DESCRIPTION file usethis::use_description(check_name = FALSE) # add license (change psyTeachR to main author) usethis::use_ccby_license(&quot;psyTeachR&quot;) # create the directory where the local copy of the book will go dir.create(&quot;inst/book&quot;, recursive = TRUE) # ignore book files when building the package usethis::use_build_ignore(&quot;_bookdown_files&quot;) usethis::use_build_ignore(&quot;files&quot;) usethis::use_build_ignore(&quot;include&quot;) usethis::use_build_ignore(&quot;images&quot;) usethis::use_build_ignore(&quot;^.*\\\\.Rproj$&quot;, escape = FALSE) usethis::use_build_ignore(&quot;^.*\\\\.Rmd$&quot;, escape = FALSE) usethis::use_build_ignore(&quot;^.*\\\\.yml$&quot;, escape = FALSE) usethis::use_build_ignore(&quot;^.*\\\\.bib$&quot;, escape = FALSE) usethis::use_build_ignore(&quot;^.*\\\\.tex$&quot;, escape = FALSE) usethis::use_build_ignore(&quot;^.*\\\\.rds$&quot;, escape = FALSE) 1.5.2 Edit the DESCRIPTION file The package name has a few rules: Contain only ASCII letters, numbers, and ‘.’ Have at least two characters Start with a letter Not end with ‘.’ 1.5.3 Add packages Add any CRAN packages you want included with your package. usethis::use_package(&quot;dplyr&quot;) usethis::use_package(&quot;tidyr&quot;) usethis::use_package(&quot;ggplot2&quot;) usethis::use_package(&quot;tidyverse&quot;, type = &quot;depends&quot;) If you want to add tidyverse, you need to add it with type = “depends” and it will load automatically when you load this package. However, this can cause a lot of problems when installing the package, so I would not recommend it. 1.5.4 Add a book function This is a function to open the local copy of the book in a web browser. Make a file called R/book.R and include the following code (replacing the relevant items with your course and package names). #&#39; Open the {YOUR COURSE NAME} book #&#39; #&#39; @return NULL #&#39; @export #&#39; book &lt;- function() { file &lt;- system.file(&quot;book&quot;, &quot;index.html&quot;, package = &quot;YOURPACKAGENAME&quot;) utils::browseURL(file) } 1.5.5 Render the book Render your book and copy the content of docs (the online version) to inst/book (the offline package version). # render a chapter or the whole book bookdown::preview_chapter(&quot;01-setup.Rmd&quot;) bookdown::render_book(&quot;index.Rmd&quot;) # copies docs dir to inst/book R.utils::copyDirectory( from = &quot;docs&quot;, to = &quot;inst/book&quot;, overwrite = TRUE, recursive = TRUE) 1.5.6 Install your package # updates your documentation and # makes new functions/datasets available devtools::document() # install the updated package devtools::install() # load your package library(&quot;your.package.name&quot;) # open the book book() 1.5.7 Add datasets To add datasets, add a data_raw directory and edit the file DATASET.R to prep your datasets. Here’s an example: usethis::use_data_raw() ## code to prepare `DATASET` dataset goes here factorial_2w2b &lt;- faux::sim_design( within = list(time = c(am = &quot;Day&quot;, pm = &quot;Night&quot;)), between = list(pet = c(dog = &quot;Dog Owner&quot;, cat = &quot;Cat Owner&quot;)), n = 25, mu = list(am = c(10, 12), pm = c(12, 14)), sd = 5, r = 0.5, plot = FALSE) usethis::use_data(factorial_2w2b, overwrite = TRUE) You can set up the documentation by hand following the instructions at https://r-pkgs.org/data.html or use the following script to set up datasets from .csv or .xls files. # function for creating dataset descriptions in Roxygen make_dataset &lt;- function(dataname, title, desc, itemdesc = list(), filetype = &quot;csv&quot;, source = &quot;&quot;, write = TRUE) { # read data and save to data directory datafile &lt;- paste0(&quot;data-raw/&quot;, dataname, &quot;.&quot;, filetype) if (filetype == &quot;csv&quot;) { data &lt;- readr::read_csv(datafile, col_types = readr::cols()) } else if (filetype == &quot;xls&quot;) { data &lt;- readxl::read_xls(datafile) } # this is awkward, but devtools::document won&#39;t work unless the saved data has the name you intend to use for it dat &lt;- list() dat[[dataname]] &lt;- data list2env(dat, envir = environment()) e &lt;- paste0(&quot;usethis::use_data(&quot;, dataname, &quot;, overwrite = TRUE)&quot;) eval(parse(text = e)) # create Roxygen description items &lt;- paste0(&quot;#&#39; \\\\item{&quot;, names(itemdesc), &quot;}{&quot;, itemdesc, &quot;}&quot;) s &lt;- sprintf(&quot;# %s ----\\n#&#39; %s\\n#&#39;\\n#&#39; %s\\n#&#39;\\n#&#39; @format A data frame with %d rows and %d variables:\\n#&#39; \\\\describe{\\n%s\\n#&#39; }\\n#&#39; @source \\\\url{%s}\\n\\&quot;%s\\&quot;\\n\\n&quot;, dataname, title, gsub(&quot;\\n+&quot;, &quot;\\n#&#39;\\n#&#39; &quot;, desc), nrow(data), ncol(data), paste(items, collapse = &quot;\\n&quot;), source, dataname ) if (!isFALSE(write)) write(s, paste0(&quot;R/&quot;, dataname, &quot;.R&quot;)) invisible(s) } After you set up the function above at the top of your DATASET.R file, you can add datasets as below (either from files you’ve added to data-raw or by creating and saving CSV files (e.g., using faux). # add country codes dataset ccodes &lt;- read_csv(&quot;https://raw.githubusercontent.com/lukes/ISO-3166-Countries-with-Regional-Codes/master/all/all.csv&quot;) write_csv(ccodes, &quot;data-raw/country_codes.csv&quot;) itemdesc &lt;- list( &quot;name&quot; = &quot;Full country name&quot;, &quot;alpha-2&quot; = &quot;2-character country code&quot;, &quot;alpha-3&quot; = &quot;3-character country code&quot;, &quot;country-code&quot; = &quot;3-digit country code&quot;, &quot;iso_3166-2&quot; = &quot;ISO code&quot;, &quot;region&quot; = &quot;World region&quot;, &quot;sub-region&quot; = &quot;Sub-region&quot;, &quot;intermediate-region&quot; = &quot;Intermediate region&quot;, &quot;region-code&quot; = &quot;World region code&quot;, &quot;sub-region-code&quot; = &quot;Sub-region code&quot;, &quot;intermediate-region-code&quot; = &quot;Intermediate region code&quot; ) make_dataset(&quot;country_codes&quot;, &quot;Country Codes&quot;, &quot;Multiple country, subregion, and region codes for 249 countries.\\nFrom https://github.com/lukes/ISO-3166-Countries-with-Regional-Codes&quot;, itemdesc, source = &quot;https://raw.githubusercontent.com/lukes/ISO-3166-Countries-with-Regional-Codes/master/all/all.csv&quot;) This will create a new file in the R directory called country_codes.R that contains your dataset description. Add it to the package documentation by running devtools::document(). 1.5.8 Add Shiny Apps You can add shiny apps to you package easily. Just put any app directories in inst/apps and add the following code to a new file R/app.R (replacing “YOUR.PACKAGE.NAME”). #&#39; Launch Shiny App #&#39; #&#39; @param name The name of the app to run #&#39; @param ... arguments to pass to shiny::runApp #&#39; #&#39; @export #&#39; app &lt;- function(name, ...) { appDir &lt;- system.file(paste0(&quot;apps/&quot;, name), package = &quot;YOUR.PACKAGE.NAME&quot;) if (appDir == &quot;&quot;) stop(&quot;The shiny app &quot;, name, &quot; does not exist&quot;) shiny::runApp(appDir, ...) } Make sure you add shiny and any other packages used in your shiny app as dependencies. Document to add the app() function and install the updated package. usethis::use_package(&quot;shiny&quot;) usethis::use_package(&quot;shinydashboard&quot;) devtools::document() devtools::install() "]]
